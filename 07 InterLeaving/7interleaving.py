# -*- coding: utf-8 -*-
"""7Interleaving.ipynb

Automatically generated by Colaboratory.



!python3 --version
import numpy as np
import matplotlib.pyplot as plt

"""## スワップするインデックスペアの生成器"""

class IndexPairGenerator:
  def __init__(self):
    return
  
  '''
  スワップするインデックスペアを生成
  @param      symbolSize int        送信シンボルの数
  @return      indexPair   np.ndarrayスワップするインデックスペア (symbolSize, 2)
  '''
  def generateIndexPair(self, symbolSize):
    idx1 = np.arange(symbolSize)
    idx2 = np.arange(symbolSize)

    np.random.shuffle(idx1)
    np.random.shuffle(idx2)
    
    return np.array([
        idx1, idx2
    ])

"""## インターリーバ"""

class InterLeaver:
  def __init__(self):
    return
  
  def interLeave(self, symbol, shuffleIndexPair):
    symbolShuffled = symbol
    for i in range(symbol.size):
      symbolShuffled[ shuffleIndexPair[0][i] ] = symbol[shuffleIndexPair[1][i]]
      symbolShuffled[ shuffleIndexPair[1][i] ] = symbol[shuffleIndexPair[0][i]]
    return symbolShuffled

"""## デインターリーバ"""

class DeInterLeaver:
  def __init__(self):
    return
  
  def deInterLeave(self, symbolShuffled, shuffleIndexPair):
    symbolDeShuffled = symbolShuffled
    
    for i in range(symbolShuffled.size):
      symbolDeShuffled[ shuffleIndexPair[0][i] ] = symbolShuffled[shuffleIndexPair[1][i]]
      symbolDeShuffled[ shuffleIndexPair[1][i] ] = symbolShuffled[shuffleIndexPair[0][i]]
    
    return symbolDeShuffled

"""## 実験
送信シンボル$10000$, シンボル入れ替え$10000$．これを$10000$回行う
"""

#実行回数
iterNum = 10000

#送信シンボル数
symbolNum = 10000

#エラーカウント
errorCnt = 0

#シャッフルインデックス生成器, インターリーバ，デインターリーバ
indexPairGenerator, interLeaver, deInterLeaver = IndexPairGenerator(), InterLeaver(), DeInterLeaver()

for _ in range(iterNum):
  #進捗バー
  if _ % 1000 == 0:
    print("#" * (_ // 1000))

  #10000個のシンボル
  symbol = np.random.randint(low = 0, high = 26, size = symbolNum)

  #シャッフルするインデックスペア
  idxPair = indexPairGenerator.generateIndexPair(symbolNum)

  #シャッフルされたシンボル
  symbolShuffled = interLeaver.interLeave(symbol, idxPair)

  #元に直したシンボル
  symbolDeShuffled = deInterLeaver.deInterLeave(symbol, idxPair)

  #エラーを加算
  errorCnt += np.sum(symbol ^ symbolDeShuffled)

print("error count:{}".format(errorCnt))